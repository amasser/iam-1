// Code generated by protoc-gen-go. DO NOT EDIT.
// source: roles.proto

/*
Package grpc is a generated protocol buffer package.

It is generated from these files:
	roles.proto
	tenants.proto

It has these top-level messages:
	ProvisionRoleRequest
	ProvisionRoleResponse
	AssignUserToRoleRequest
	AssignUserToRoleResponse
	UnassignUserFromRoleRequest
	UnassignUserFromRoleResponse
	AssignGroupToRoleRequest
	AssignGroupToRoleResponse
	UnassignGroupFromRoleRequest
	UnassignGroupFromRoleResponse
	ProvisionTenantRequest
	ProvisionTenantResponse
	ActivateTenantRequest
	ActivateTenantResponse
	DeactivateTenantRequest
	DeactivateTenantResponse
	OfferInvitationRequest
	OfferInvitationResponse
	WithdrawInvitationRequest
	WithdrawInvitationResponse
	FullName
	PostalAddress
*/
package grpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc1 "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProvisionRoleRequest struct {
	TenantId        string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Description     string `protobuf:"bytes,3,opt,name=description" json:"description,omitempty"`
	SupportsNesting bool   `protobuf:"varint,4,opt,name=supports_nesting,json=supportsNesting" json:"supports_nesting,omitempty"`
}

func (m *ProvisionRoleRequest) Reset()                    { *m = ProvisionRoleRequest{} }
func (m *ProvisionRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*ProvisionRoleRequest) ProtoMessage()               {}
func (*ProvisionRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ProvisionRoleRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *ProvisionRoleRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProvisionRoleRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProvisionRoleRequest) GetSupportsNesting() bool {
	if m != nil {
		return m.SupportsNesting
	}
	return false
}

type ProvisionRoleResponse struct {
}

func (m *ProvisionRoleResponse) Reset()                    { *m = ProvisionRoleResponse{} }
func (m *ProvisionRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*ProvisionRoleResponse) ProtoMessage()               {}
func (*ProvisionRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type AssignUserToRoleRequest struct {
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	RoleName string `protobuf:"bytes,2,opt,name=role_name,json=roleName" json:"role_name,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *AssignUserToRoleRequest) Reset()                    { *m = AssignUserToRoleRequest{} }
func (m *AssignUserToRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*AssignUserToRoleRequest) ProtoMessage()               {}
func (*AssignUserToRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AssignUserToRoleRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *AssignUserToRoleRequest) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *AssignUserToRoleRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type AssignUserToRoleResponse struct {
}

func (m *AssignUserToRoleResponse) Reset()                    { *m = AssignUserToRoleResponse{} }
func (m *AssignUserToRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*AssignUserToRoleResponse) ProtoMessage()               {}
func (*AssignUserToRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type UnassignUserFromRoleRequest struct {
	TenantId string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	RoleName string `protobuf:"bytes,2,opt,name=role_name,json=roleName" json:"role_name,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *UnassignUserFromRoleRequest) Reset()                    { *m = UnassignUserFromRoleRequest{} }
func (m *UnassignUserFromRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*UnassignUserFromRoleRequest) ProtoMessage()               {}
func (*UnassignUserFromRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UnassignUserFromRoleRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *UnassignUserFromRoleRequest) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *UnassignUserFromRoleRequest) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type UnassignUserFromRoleResponse struct {
}

func (m *UnassignUserFromRoleResponse) Reset()                    { *m = UnassignUserFromRoleResponse{} }
func (m *UnassignUserFromRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*UnassignUserFromRoleResponse) ProtoMessage()               {}
func (*UnassignUserFromRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type AssignGroupToRoleRequest struct {
	TenantId  string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	RoleName  string `protobuf:"bytes,2,opt,name=role_name,json=roleName" json:"role_name,omitempty"`
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
}

func (m *AssignGroupToRoleRequest) Reset()                    { *m = AssignGroupToRoleRequest{} }
func (m *AssignGroupToRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*AssignGroupToRoleRequest) ProtoMessage()               {}
func (*AssignGroupToRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AssignGroupToRoleRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *AssignGroupToRoleRequest) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *AssignGroupToRoleRequest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type AssignGroupToRoleResponse struct {
}

func (m *AssignGroupToRoleResponse) Reset()                    { *m = AssignGroupToRoleResponse{} }
func (m *AssignGroupToRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*AssignGroupToRoleResponse) ProtoMessage()               {}
func (*AssignGroupToRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type UnassignGroupFromRoleRequest struct {
	TenantId  string `protobuf:"bytes,1,opt,name=tenant_id,json=tenantId" json:"tenant_id,omitempty"`
	RoleName  string `protobuf:"bytes,2,opt,name=role_name,json=roleName" json:"role_name,omitempty"`
	GroupName string `protobuf:"bytes,3,opt,name=group_name,json=groupName" json:"group_name,omitempty"`
}

func (m *UnassignGroupFromRoleRequest) Reset()                    { *m = UnassignGroupFromRoleRequest{} }
func (m *UnassignGroupFromRoleRequest) String() string            { return proto.CompactTextString(m) }
func (*UnassignGroupFromRoleRequest) ProtoMessage()               {}
func (*UnassignGroupFromRoleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UnassignGroupFromRoleRequest) GetTenantId() string {
	if m != nil {
		return m.TenantId
	}
	return ""
}

func (m *UnassignGroupFromRoleRequest) GetRoleName() string {
	if m != nil {
		return m.RoleName
	}
	return ""
}

func (m *UnassignGroupFromRoleRequest) GetGroupName() string {
	if m != nil {
		return m.GroupName
	}
	return ""
}

type UnassignGroupFromRoleResponse struct {
}

func (m *UnassignGroupFromRoleResponse) Reset()                    { *m = UnassignGroupFromRoleResponse{} }
func (m *UnassignGroupFromRoleResponse) String() string            { return proto.CompactTextString(m) }
func (*UnassignGroupFromRoleResponse) ProtoMessage()               {}
func (*UnassignGroupFromRoleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*ProvisionRoleRequest)(nil), "iam.ProvisionRoleRequest")
	proto.RegisterType((*ProvisionRoleResponse)(nil), "iam.ProvisionRoleResponse")
	proto.RegisterType((*AssignUserToRoleRequest)(nil), "iam.AssignUserToRoleRequest")
	proto.RegisterType((*AssignUserToRoleResponse)(nil), "iam.AssignUserToRoleResponse")
	proto.RegisterType((*UnassignUserFromRoleRequest)(nil), "iam.UnassignUserFromRoleRequest")
	proto.RegisterType((*UnassignUserFromRoleResponse)(nil), "iam.UnassignUserFromRoleResponse")
	proto.RegisterType((*AssignGroupToRoleRequest)(nil), "iam.AssignGroupToRoleRequest")
	proto.RegisterType((*AssignGroupToRoleResponse)(nil), "iam.AssignGroupToRoleResponse")
	proto.RegisterType((*UnassignGroupFromRoleRequest)(nil), "iam.UnassignGroupFromRoleRequest")
	proto.RegisterType((*UnassignGroupFromRoleResponse)(nil), "iam.UnassignGroupFromRoleResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc1.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc1.SupportPackageIsVersion4

// Client API for RoleService service

type RoleServiceClient interface {
	ProvisionRole(ctx context.Context, in *ProvisionRoleRequest, opts ...grpc1.CallOption) (*ProvisionRoleResponse, error)
	AssignUserToRole(ctx context.Context, in *AssignUserToRoleRequest, opts ...grpc1.CallOption) (*AssignUserToRoleResponse, error)
	UnassignUserFromRole(ctx context.Context, in *UnassignUserFromRoleRequest, opts ...grpc1.CallOption) (*UnassignUserFromRoleResponse, error)
	AssignGroupToRole(ctx context.Context, in *AssignGroupToRoleRequest, opts ...grpc1.CallOption) (*AssignGroupToRoleResponse, error)
	UnassignGroupFromRole(ctx context.Context, in *UnassignGroupFromRoleRequest, opts ...grpc1.CallOption) (*UnassignGroupFromRoleResponse, error)
}

type roleServiceClient struct {
	cc *grpc1.ClientConn
}

func NewRoleServiceClient(cc *grpc1.ClientConn) RoleServiceClient {
	return &roleServiceClient{cc}
}

func (c *roleServiceClient) ProvisionRole(ctx context.Context, in *ProvisionRoleRequest, opts ...grpc1.CallOption) (*ProvisionRoleResponse, error) {
	out := new(ProvisionRoleResponse)
	err := grpc1.Invoke(ctx, "/iam.RoleService/ProvisionRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) AssignUserToRole(ctx context.Context, in *AssignUserToRoleRequest, opts ...grpc1.CallOption) (*AssignUserToRoleResponse, error) {
	out := new(AssignUserToRoleResponse)
	err := grpc1.Invoke(ctx, "/iam.RoleService/AssignUserToRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UnassignUserFromRole(ctx context.Context, in *UnassignUserFromRoleRequest, opts ...grpc1.CallOption) (*UnassignUserFromRoleResponse, error) {
	out := new(UnassignUserFromRoleResponse)
	err := grpc1.Invoke(ctx, "/iam.RoleService/UnassignUserFromRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) AssignGroupToRole(ctx context.Context, in *AssignGroupToRoleRequest, opts ...grpc1.CallOption) (*AssignGroupToRoleResponse, error) {
	out := new(AssignGroupToRoleResponse)
	err := grpc1.Invoke(ctx, "/iam.RoleService/AssignGroupToRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roleServiceClient) UnassignGroupFromRole(ctx context.Context, in *UnassignGroupFromRoleRequest, opts ...grpc1.CallOption) (*UnassignGroupFromRoleResponse, error) {
	out := new(UnassignGroupFromRoleResponse)
	err := grpc1.Invoke(ctx, "/iam.RoleService/UnassignGroupFromRole", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RoleService service

type RoleServiceServer interface {
	ProvisionRole(context.Context, *ProvisionRoleRequest) (*ProvisionRoleResponse, error)
	AssignUserToRole(context.Context, *AssignUserToRoleRequest) (*AssignUserToRoleResponse, error)
	UnassignUserFromRole(context.Context, *UnassignUserFromRoleRequest) (*UnassignUserFromRoleResponse, error)
	AssignGroupToRole(context.Context, *AssignGroupToRoleRequest) (*AssignGroupToRoleResponse, error)
	UnassignGroupFromRole(context.Context, *UnassignGroupFromRoleRequest) (*UnassignGroupFromRoleResponse, error)
}

func RegisterRoleServiceServer(s *grpc1.Server, srv RoleServiceServer) {
	s.RegisterService(&_RoleService_serviceDesc, srv)
}

func _RoleService_ProvisionRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).ProvisionRole(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.RoleService/ProvisionRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).ProvisionRole(ctx, req.(*ProvisionRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_AssignUserToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignUserToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).AssignUserToRole(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.RoleService/AssignUserToRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).AssignUserToRole(ctx, req.(*AssignUserToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UnassignUserFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignUserFromRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UnassignUserFromRole(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.RoleService/UnassignUserFromRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UnassignUserFromRole(ctx, req.(*UnassignUserFromRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_AssignGroupToRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignGroupToRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).AssignGroupToRole(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.RoleService/AssignGroupToRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).AssignGroupToRole(ctx, req.(*AssignGroupToRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoleService_UnassignGroupFromRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc1.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnassignGroupFromRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoleServiceServer).UnassignGroupFromRole(ctx, in)
	}
	info := &grpc1.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iam.RoleService/UnassignGroupFromRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoleServiceServer).UnassignGroupFromRole(ctx, req.(*UnassignGroupFromRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RoleService_serviceDesc = grpc1.ServiceDesc{
	ServiceName: "iam.RoleService",
	HandlerType: (*RoleServiceServer)(nil),
	Methods: []grpc1.MethodDesc{
		{
			MethodName: "ProvisionRole",
			Handler:    _RoleService_ProvisionRole_Handler,
		},
		{
			MethodName: "AssignUserToRole",
			Handler:    _RoleService_AssignUserToRole_Handler,
		},
		{
			MethodName: "UnassignUserFromRole",
			Handler:    _RoleService_UnassignUserFromRole_Handler,
		},
		{
			MethodName: "AssignGroupToRole",
			Handler:    _RoleService_AssignGroupToRole_Handler,
		},
		{
			MethodName: "UnassignGroupFromRole",
			Handler:    _RoleService_UnassignGroupFromRole_Handler,
		},
	},
	Streams:  []grpc1.StreamDesc{},
	Metadata: "roles.proto",
}

func init() { proto.RegisterFile("roles.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0x4f, 0x6f, 0xa2, 0x40,
	0x18, 0xc6, 0x97, 0xd5, 0x18, 0x78, 0xcd, 0x66, 0xdd, 0x89, 0x46, 0x1c, 0xd4, 0x65, 0x39, 0xb9,
	0x17, 0x0f, 0xbb, 0x9f, 0x60, 0xf7, 0xd0, 0x3f, 0x17, 0xd3, 0x52, 0xbd, 0x34, 0x69, 0x28, 0xd5,
	0x09, 0x99, 0x44, 0x66, 0xe8, 0x0c, 0xd8, 0x2f, 0xd2, 0x2f, 0xd4, 0x6f, 0xd6, 0x30, 0x20, 0x45,
	0x05, 0xdb, 0x83, 0xbd, 0xc1, 0xf3, 0xcc, 0xbc, 0xef, 0x6f, 0xe6, 0x7d, 0x00, 0xda, 0x82, 0xaf,
	0x89, 0x9c, 0x46, 0x82, 0xc7, 0x1c, 0x35, 0xa8, 0x1f, 0x3a, 0xcf, 0x1a, 0x74, 0xaf, 0x04, 0xdf,
	0x50, 0x49, 0x39, 0x73, 0xf9, 0x9a, 0xb8, 0xe4, 0x31, 0x21, 0x32, 0x46, 0x16, 0x18, 0x31, 0x61,
	0x3e, 0x8b, 0x3d, 0xba, 0x32, 0x35, 0x5b, 0x9b, 0x18, 0xae, 0x9e, 0x09, 0x97, 0x2b, 0x84, 0xa0,
	0xc9, 0xfc, 0x90, 0x98, 0x5f, 0x95, 0xae, 0x9e, 0x91, 0x0d, 0xed, 0x15, 0x91, 0x4b, 0x41, 0xa3,
	0x98, 0x72, 0x66, 0x36, 0x94, 0x55, 0x96, 0xd0, 0x6f, 0xe8, 0xc8, 0x24, 0x8a, 0xb8, 0x88, 0xa5,
	0xc7, 0x88, 0x8c, 0x29, 0x0b, 0xcc, 0xa6, 0xad, 0x4d, 0x74, 0xf7, 0xfb, 0x56, 0x9f, 0x65, 0xb2,
	0xd3, 0x87, 0xde, 0x1e, 0x95, 0x8c, 0x38, 0x93, 0xc4, 0xe1, 0xd0, 0xff, 0x27, 0x25, 0x0d, 0xd8,
	0x42, 0x12, 0x31, 0xe7, 0x1f, 0x26, 0xb6, 0xc0, 0x48, 0xcf, 0xee, 0x95, 0xb0, 0xf5, 0x54, 0x98,
	0xa5, 0xe8, 0x18, 0xf4, 0x44, 0x12, 0xa1, 0xbc, 0x8c, 0xbb, 0x78, 0x77, 0x30, 0x98, 0x87, 0x0d,
	0x73, 0x18, 0x09, 0xd6, 0x82, 0xf9, 0x85, 0x7b, 0x26, 0x78, 0xf8, 0xf9, 0x40, 0x63, 0x18, 0x56,
	0x37, 0x2d, 0xa0, 0x72, 0xe0, 0x73, 0xc1, 0x93, 0xe8, 0x54, 0x57, 0x34, 0x02, 0x08, 0xd2, 0x7a,
	0x5e, 0x89, 0xc9, 0x50, 0x4a, 0x6a, 0x3b, 0x16, 0x0c, 0x2a, 0x9a, 0xe6, 0x44, 0x4f, 0x6f, 0xc4,
	0xca, 0x3e, 0xdd, 0x3d, 0xbd, 0x43, 0xf5, 0x13, 0x46, 0x35, 0x8d, 0x33, 0xb2, 0x3f, 0x2f, 0x0d,
	0x68, 0xa7, 0xc2, 0x0d, 0x11, 0x1b, 0xba, 0x24, 0xe8, 0x02, 0xbe, 0xed, 0xc4, 0x0e, 0x0d, 0xa6,
	0xd4, 0x0f, 0xa7, 0x55, 0x1f, 0x08, 0xc6, 0x55, 0x56, 0x7e, 0xe2, 0x2f, 0xe8, 0x1a, 0x3a, 0xfb,
	0xb1, 0x41, 0x43, 0xb5, 0xa3, 0x26, 0xbe, 0x78, 0x54, 0xe3, 0x16, 0x25, 0xef, 0xa0, 0x5b, 0x35,
	0x78, 0x64, 0xab, 0x8d, 0x47, 0x82, 0x88, 0x7f, 0x1d, 0x59, 0x51, 0x94, 0x9f, 0xc3, 0x8f, 0x83,
	0x11, 0xa2, 0x32, 0xd4, 0x61, 0x9e, 0xf0, 0xb8, 0xce, 0x2e, 0xaa, 0xde, 0x43, 0xaf, 0x72, 0x04,
	0x68, 0x97, 0xa9, 0x2a, 0x17, 0xd8, 0x39, 0xb6, 0x64, 0xdb, 0xe1, 0x7f, 0xeb, 0xb6, 0x19, 0x88,
	0x68, 0xf9, 0xd0, 0x52, 0x7f, 0xb5, 0xbf, 0xaf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x77, 0xb3,
	0x4c, 0xe4, 0x04, 0x00, 0x00,
}
